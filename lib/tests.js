// Generated by CoffeeScript 2.5.1
(function() {
  //###########################################################################################################
  var CND, alert, badge, debug, echo, forever, help, include, info, log, parallel, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'FOREVER-PARALLEL';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  ({forever, parallel} = require('..'));

  //===========================================================================================================
  // HELPERS
  //-----------------------------------------------------------------------------------------------------------
  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this["forever (1)"] = function(T, done) {
    var after, get_context;
    //.........................................................................................................
    after = function(t, handler) {
      whisper(`sleeping for ${t} seconds`);
      return setTimeout(handler, t * 1000);
    };
    //.........................................................................................................
    get_context = function(handler) {
      var count, task;
      count = 10;
      //.......................................................................................................
      task = function(next) {
        count += -1;
        help(count);
        return after(0.25, function(error) {
          if (count > 0) {
            return next();
          }
          warn('over');
          return handler();
        });
      };
      //.......................................................................................................
      forever(task);
      return null;
    };
    //.........................................................................................................
    return get_context(function(error, result) {
      if (error != null) {
        warn(error);
      }
      help(rpr(result));
      return done();
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    include = ["forever (1)"];
    this._prune();
    this._main();
  }

  // CND.run => @_main()
// CND.run => @[ "spawn reports errors, doesn't throw (1)" ]()
// CND.run => @[ "spawn reports errors, doesn't throw (2)" ]()

  // debug '5562', JSON.stringify key for key in Object.keys @

  // @[ "(v4) $select (demo)" ] null, -> warn "not tested"

}).call(this);

//# sourceMappingURL=tests.js.map
